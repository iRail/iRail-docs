FORMAT: 1A

# iRail API Docs

iRail supports digital creativity concerning mobility in Belgium. 
This is an attempt to make the railway time schedules in Belgium easily available for anyone.

The iRail api allows anyone to query trains, stations, liveboards and connections.

The API is available at [https://api.irail.be](https://api.irail.be/).

::: warning
TLS 1.1 or higher is required to access the API. If you're developing an application, and SSL handshake errors occur, you need to use a newer security protocol. HTTPS is supported over TLS1.1 and higher. SSL, SSL2, SSL3 and TLS1.0 are disabled as those protocols are considered unsafe.
:::

::: note
You can check the current status of the API at [status.irail.be](https://status.irail.be)
:::

## Best practices when using the API

If you build an application on top of the iRail api, be sure to do at least one of the following things:

- If possible, set the user-agent header string. Include the name of your application, and a way to contact you in case something would go wrong. An example user agent string format is `<application name>/<application version> (<website>; <mail>)`, which could result in the following string: `irail/1.2.0 (irail.be; hello@irail.be)`. The use of a user agent string like this isn't obligated or enforced, but allows for better communication.
- If you can't set the user agent string, at least be sure to follow us on [github](https://github.com/irail/irail), [website](https://hello.irail.be) or [gitter](https://gitter.im/iRail/iRail).

## Request limits
You can make up to 3 requests per second per source IP address. Every IP address also has 5 burst requests, meaning you can either have 8 requests
in 1 second or 15 requests in 3 seconds, but you will need to drop below 3 requests per second in order for these burst requests to refill.

Exceeding the request limit will cause the server to return 429 responses. 

::: note
Request limits are set so everyone can enjoy open transport data with high availability and fast response times. Please don't use excessive polling: always optimise your application, even when you're not reaching our request limitations (yet). We include HTTP headers to signal how long our data is valid, please refrain from making the same request again before this period has elapsed.
:::

::: note
Are you limited by our request limits? Get in touch to see if we can work out a better request strategy together.
:::

::: warning
Always undertake action when your application receives frequent "429 Too Many Requests" responses!
When your application causes too much requests, one of the following actions will happen
 
 - When the user agent is set, we will contact the developers at the provided e-mail address or website. In case of excessive requests for a long period of time (e.g. multiple 429 responses per second for more than 3 hours), your application might be blocked before we receive a response. We will still contact you to assist with resolving the issue and increasing the efficiency of your requests.

 - When no user agent is set, the source IP address will be blocked without prior warnings. If your IP address is blocked, please contact the iRail team to resolve this.

:::

## URIs

The iRail API uses URIs ([Uniform Resource Identifications](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)) to identify departures, stations, trains and occupancies. This way, there can be no misinterpretations. While there might be multiple meanings or interpretations possible for "Brussels South" (for example, the railway station, the airport, maybe the region south of Brussels), the URI http://irail.be/stations/NMBS/008814001 means the railway station Brussels south, and nothing else. The meaning of this URI doesn't change on other websites, APIs, or datasets. URIs don't change often, and don't have to be human readable. They can change however, therefore they shouldn't be composed by the user, but should be retrieved from a previous response. 

::: note
URI's are ids, just like numeric ids. While in this case they represent a URL, these URLs do not make part of the API! All API requests go to https://api.irail.be! Ids can be used on any domain, but if the id is the same url, you know that the objects represent the same thing, even if they are in different APIs or applications.
:::
### URIs in use by the iRail API

The following objects are identified by a URI:
- Stations: every station has a URI, similar to http://irail.be/stations/NMBS/008814001, where 008814001 is based on an existing identifier used by the NMBS.
- Vehicles: every vehicle has a URI, which identifies the trip at a certain time which is made by this vehicle. An example URI is http://irail.be/vehicle/IC532.
- Departures: A departure is a certain train, leaving a certain station, at a certain day. The combination of these 3 fields is unique through time, which makes it perfect as an identifier. Example: http://irail.be/connections/8814001/20171002/IC532.

## Caching
The API supports caching and [conditional get requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests). Conditional get requests allow you to tell the server which version of the data you have. If there is newer data available, the server will return an HTTP 200 status code along with the new data. If no new data is available, the server will return an HTTP 304 Not Modified status code, along with an empty body. 
The benefits of caching are less data transfer, and faster responses in case of a 304 response.

#### Supported request headers
- [If-None-Match](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match)

#### Supported response headers
- [Etag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)
- [Cache-Control](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)

## Bug reports
You can report bugs in the api on [the API github repository](https://github.com/irail/irail/issues).
You can report mistakes in the documentation on [the documentation github repository](https://github.com/irail/irail-docs/issues).

<!-- include(stations.apib) -->
<!-- include(liveboard.apib) -->
<!-- include(connections.apib) -->
<!-- include(vehicle.apib) -->
<!-- include(composition.apib) -->
<!-- include(disturbances.apib) -->
<!-- include(occupancy.apib) -->
<!-- include(logs.apib) -->
<!-- include(data.apib) -->

# Data Structures

<!-- include(datastructures.apib) -->
